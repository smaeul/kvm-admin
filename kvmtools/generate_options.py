#!/usr/bin/env python

"""
Tool to extract kvm-qemu paramater.
(c) 2010 Jens Kasten <jens@kasten-edv.de>
"""

import os
import sys
import re
from subprocess import Popen, PIPE, call


class Generator(object):

    def __init__(self):
        # Contain the absolute path to kvm binary.
        # Debian and Gentoo use this for default path.
        self.qemu_kvm = "/usr/bin/kvm"

        # default setting for most parameters
        self.disabled = "disabled"
        # default setting for options_enabled_by_default
        self.enabled = "enabled"
        # file where to write the dictonary
        self.file_to_write = os.path.join(os.path.dirname(__file__), "qemu_kvm_options.py")
        # option on commandline
        self.doit = "doit"
        # option to exclude
        self.exclude_options = ['h', 'version', 'M']

    def usage(self):
        print "Usage: %s %s" % (sys.argv[0], self.doit)

    def help(self):
        print "help"

    def arguments(self):
        """
        Check input and set the binary path.
        """
        print "Type q to quit."
        if os.path.exists(self.qemu_kvm):
            print "Found %s" % self.qemu_kvm
            result = raw_input("Should i use it [y/n]")
            if result == "" or result == "y":
                return
            elif result == "q":
                sys.exit()
        print "Type the absolute path to qemu-kvm  binary and press enter."
        result = raw_input("Path: ")
        if result == "q":
            sys.exit()
        elif os.path.exists(result):
            self.qemu_kvm = result
            return
        else:
            print "Coult not found %s" % result

    def generate(self):
        """
        Extract all arguments.
        """
        try:
            # dictionary which contain all options
            output = {}
            # line counter as key for dictionary output 
            line_counter = 0

            if os.path.isfile(self.file_to_write):
                os.remove(self.file_to_write)
            
            header = "#!/usr/bin/env python\n"
            header += '"""\n'
            header += "    Autogenerated dictionary. Don't edit this file!\n"
            header += '"""\n\n'
            header += "qemu_kvm_options = {\n"
            footer = "}\n"

            cmd = [self.qemu_kvm, '--help']
            result = Popen(cmd, stdin=PIPE, stdout=PIPE)

            # extract option from kvm --help output
            for line in result.stdout:
                if line.startswith('-'):
                    # split options from help text
                    options = line.split(' ', 1)
                    # remove leading sign '-' and newline
                    options = options[0][1:].strip("\n")
                    # check for special line like fda/fdb or hda/hdb 
                    if re.search('/', options):
                        options_two = options.split('/')
                        output[line_counter] = '\t"%s": "%s",' % \
                            (options_two[0], self.disabled)
                        line_counter += 1
                        output[line_counter] = '\t"%s": "%s",' % \
                            (options_two[1][1:], self.disabled)
                        line_counter += 1
                    else:
                        # remove option which only display help text
                        if options not in self.exclude_options:
                            output[line_counter] = '\t"%s": "%s",' % \
                                (options, self.disabled)
                            line_counter += 1 
                               
    
            # write output to __init__.py
            fd = open(self.file_to_write, 'a')
            fd.write(header)
            for index, value in output.iteritems():
                if index == 0:
                    fd.write(value + "\n")
                else:
                    # check for double key
                    if value != output[index-1]:
                        fd.write(value + "\n")
            fd.write(footer)                        
            fd.close()
        except OSError, e:
            print str(e)
        except IOError, e:
            print str(e)
    

def main():
    generator = Generator()
    if len(sys.argv) < 2:
        generator.usage()
    elif len(sys.argv) == 2 and sys.argv[1] == generator.doit:
        #generator.arguments()
        #if generator.qemu_kvm:
        generator.generate()
    else:
        generator.help()
    
if __name__ == "__main__":
    main()
