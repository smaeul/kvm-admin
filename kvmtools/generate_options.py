#!/usr/bin/env python
#
# Module to generate qemu-kvm options file
# 

"""
(c) 2010-12 Jens Kasten <jens@kasten-edv.de>
"""

import re

from kvmtools.generator_helper import GeneratorHelper


class Generator(GeneratorHelper):
    """Generate qemu-kvm options and write them into file
    kvm_options.py.
    """
    def __init__(self):
        GeneratorHelper.__init__(self)
        self.prepare_generator()

    def generate(self):
        """Extract all arguments."""
        # file descriptor
        fd = None
        output = {}
        line_counter = 0
        try:
            header = "#!/usr/bin/env python\n"
            header += "# Autogenerated dictionary. Don't edit this file!\n#\n"
            header += "# Generated for: %s\n#\n\n" % self.kvm_options[0]
            header += "kvm_options = {\n"
            footer = "}\n"
    
            # extract options from qemu-kvm --help and put them into a dict
            for line in self.kvm_options:
                if line.startswith('-'):
                    # split options from help text
                    options = line.split(' ', 1)
                    # remove leading sign '-' and newline
                    options = options[0][1:].strip()
                    # check for special line like fda/fdb or hda/hdb 
                    if re.search('/', options):
                        options_two = options.split('/')
                        output[line_counter] = '\t"%s": "%s",' % \
                            (options_two[0], self.is_disabled)
                        line_counter += 1
                        output[line_counter] = '\t"%s": "%s",' % \
                            (options_two[1][1:], self.is_disabled)
                        line_counter += 1
                    else:
                        # remove option which only display help text
                        if options not in self.exclude_options:
                            output[line_counter] = '\t"%s": "%s",' % \
                                (options, self.is_disabled)
                            line_counter += 1 
            
            # write output to file
            fd = open(self.kvm_options_file, 'w')
            fd.write(header)
            for index, value in output.iteritems():
                if index == 0:
                    fd.write(value + "\n")
                else:
                    # check for double key
                    if value != output[index-1]:
                        fd.write(value + "\n")
            fd.write(footer)                        
        except IOError, e:
            print "Operation failed: %s" % e
        finally:
            if fd:
                fd.close()


def main():
    generator = Generator()
    generator.generate()


if __name__ == "__main__":
    main()
